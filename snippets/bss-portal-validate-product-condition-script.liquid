<script>
    let popupHtml = `
    <div class="popup popup-validate-product" data-popup="popup-1">
    <div class="popup-inner">
        <h2 class="bss-purchase-late-note">Purchase Late Note</h2>
        <div class="popup-scroll">
            <span>
                <p class="invalid-netterm-product">
                </p>
            </span>
            <span class="invalid-netterm-product-message">
                <p>
                </p>
            </span>
        </div>
        <p><a class="bss-proceed-to-purchase-late" href="#">Proceed to purchase late page</a></p>
        <a class="popup-close popup-validate-product" data-popup-close="popup-1" href="#">x</a>
    </div>
    </div>
    `;

    let popupMultiButton = `
    <div class="popup popup-multi-button" data-popup="popup-2">
    <div class="popup-inner">
        <h2 class="bss-purchase-late-rule-name">Purchase Late Note</h2>
        <div class="popup-scroll">
            <span class="invalid-netterm-rule-message">
            </span>
        </div>

        <a class="popup-close popup-multi-button" data-popup-close="popup-2" href="#">x</a>
    </div>
    </div>
    `;
    let popupRestrictNTHtml = `
    <div class="popup popup-validate-restrict" data-popup="popup-3">
    <div class="popup-inner">
        <h2 class="bss-purchase-late-restrict-note">Restrict Net Terms options according to Order Amount/Quantity</h2>
        <div class="popup-scroll">
            <span>
                <p class="valid-netterm-product">
                </p>
            </span>
            <span class="valid-netterm-product-message">
                <p>
                </p>
            </span>
        </div>
        <a class="popup-close popup-validate-restrict" data-popup-close="popup-3" href="#">x</a>
    </div>
    </div>
    `;
    let popupCustomerLogin = `
        <div class="popup popup-customer-login" data-popup="popup-3">
            <div class="popup-inner">
                <h2 class="bss-purchase-late-note">Purchase Late Note</h2>
                <div class="popup-scroll">
                    <span class="invalid-netterm-rule-message-login">Please login or register account to purchase late these items</span>
                </div>
                <p><a class="bss-proceed-to-purchase-late-login" href="/account/login">Proceed to account login/register page</a></p>
                <a class="popup-close popup-customer-login" data-popup-close="popup-3" href="#">x</a>
            </div>
        </div>
    `;
// PopupCss
var styles = `
    .popup {
        width:100%;
        height:100%;
        display:none;
        position:fixed;
        top:0px;
        left:0px;
        z-index: 9999;
        background:rgba(0,0,0,0.75);
    }
    .popup-inner {
        max-width:700px;
        width:90%;
        padding:40px;
        position:absolute;
        top:50%;
        left:50%;
        -webkit-transform:translate(-50%, -50%);
        transform:translate(-50%, -50%);
        box-shadow:0px 2px 6px rgba(0,0,0,1);
        border-radius:3px;
        background:#fff;
    }
    .popup-close {
        width:30px;
        height:30px;
        padding-top:4px;
        display:inline-block;
        position:absolute;
        top:0px;
        right:0px;
        transition:ease 0.25s all;
        -webkit-transform:translate(50%, -50%);
        transform:translate(50%, -50%);
        border-radius:1000px;
        background:rgba(0,0,0,0.8);
        font-family:Arial, Sans-Serif;
        font-size:20px;
        text-align:center;
        line-height:100%;
        color:#fff;
    }
    .popup-close:hover {
        -webkit-transform:translate(50%, -50%) rotate(180deg);
        transform:translate(50%, -50%) rotate(180deg);
        background:rgba(0,0,0,1);
        text-decoration:none;
    }
    .popup-scroll{
      overflow-y: scroll;
      max-height: 300px;
      padding:0 1em 0 0;
    }
    .bss-proceed-to-purchase-late, .bss-proceed-to-purchase-late-login {
        font-weight: 600;
        color: #3497fd;
        text-decoration: underline;
        margin-top: 20px;
        display: block;
    }
    .popup-scroll::-webkit-scrollbar {background-color:#EEE;width:10px;}
    .popup-scroll::-webkit-scrollbar-thumb {
    	border:1px #EEE solid;border-radius:2px;background:#777;
    	-webkit-box-shadow: 0 0 8px #555 inset;box-shadow: 0 0 8px #555 inset;
    	-webkit-transition: all .3s ease-out;transition: all .3s ease-out;
    	}
    .popup-scroll::-webkit-scrollbar-track {-webkit-box-shadow: 0 0 2px #ccc;box-shadow: 0 0 2px #ccc;}
    `;
var styleSheet = document.createElement("style")
styleSheet.type = "text/css"
styleSheet.innerText = styles
document.head.appendChild(styleSheet)

window.document.body.insertAdjacentHTML( 'afterbegin', popupHtml);
window.document.body.insertAdjacentHTML( 'afterbegin', popupMultiButton);
window.document.body.insertAdjacentHTML( 'afterbegin', popupRestrictNTHtml);
window.document.body.insertAdjacentHTML( 'afterbegin', popupCustomerLogin);

var ruleNtApply = [];
var invalidRuleNtApply = {};
const checkRuleNtApply = function() {
    let ruleId = localStorage.getItem('bssBCPNtId');
    let ruleApply = bssListRule.filter(rule => ruleId == rule.id)
    if (ruleApply.length) {
        let rule = ruleApply[0];
        let ruleCustomerIds = rule.customer_ids ? rule.customer_ids.split(',') : [];
        let ruleCustomerTags = rule.customer_tags ? rule.customer_tags.toLowerCase().split(',') : [];

        if (rule.apply_to == 0) {
            ruleNtApply = rule;
            return true;
        }
        if ((rule.apply_to == 1) && customerId && (ruleCustomerIds.indexOf(customerId.toString()) !== -1)) {
            ruleNtApply = rule;
            return true;
        }

        if ((rule.apply_to == 2) && customerTag.length > 0) {
            for(const ruleCustomerTag of ruleCustomerTags){
                for(const tag of customerTag){
                    if(tag.toLowerCase() === ruleCustomerTag){
                        ruleNtApply = rule;
                        return true;
                    }
                }
            }
        }

        if (rule.apply_to == 3 && customerId) {
            ruleNtApply = rule;
            return true;
        }
    }
    ruleNtApply = ruleApply.length ? ruleApply[0] : null;
    return false;
}

const checkCustomerApply = function () {
    let ruleCheck = Object.keys(ruleNtApply).length ? ruleNtApply : invalidRuleNtApply;
    let customer = {
        id: customerId,
        tags: customerTag
    };
    if (checkCustomer(ruleCheck, customer)) {
        return true;
    } else {
        return false;
    }
}

function getCartData(isFirstLoad) {
    var url = "/cart.js";
    var options = {
        method: 'GET'
    };
    var getCartDataReq = fetch(url, options);
    getCartDataReq
        .then(function(response) {
            if (!response.ok) {
                throw new Error("HTTP error, status = " + response.status);
            }
            var dataJSON_promise = response.json();
            return dataJSON_promise;
        })
        .then(function(cartData) {
            validatePurchaseLate(cartData, isFirstLoad);
        })
        .catch(function(error) {
            console.log("Noooooo! Something error:");
            console.log(error);
        });
}

getCartData(true);

{% if nt_apply_to == "2" %}
const checkProductPurchaseLate = function(productData) {
    let conditionType = ruleNtApply ? ruleNtApply.product_condition_type : null;
    let ruleTags = ruleNtApply ? ruleNtApply.product_tags : '';
    ruleTags = ruleTags ? ruleTags.split(",") : [];

    let specificProductIds = ruleNtApply ? ruleNtApply.product_ids : '';
    specificProductIds = specificProductIds ? specificProductIds.split(",") : [];

    let ruleCollectionIds = ruleNtApply ? ruleNtApply.product_collections : '';
    ruleCollectionIds = ruleCollectionIds ? ruleCollectionIds.split(",") : [];

    let productId = productData.product_id;
    let collections = productData.collections;
    let tags = productData ? productData.tags : '';

    if (conditionType == 0) {
        return true;
    } else if (conditionType == 1) {
        if (specificProductIds.indexOf(productId + "") !== -1) {
            return true;
        }
    } else if (conditionType == 2) {
        var checkArray = collections.filter(collection => ruleCollectionIds.includes(collection + ""))
        if (checkArray.length > 0) {
            return true;
        }
    } else if (conditionType == 3) {
        var checkArray = ruleTags.filter(tag => tags.includes(tag + ""))
        if (checkArray.length > 0) {
            return true;
        }
    }
    return false;
} 
{% else %}
const checkProductPurchaseLate = function(productData) {
    if (!ruleNtApply) {
        ruleNtApply = invalidRuleNtApply;
    }

    let conditionType = ruleNtApply.product_condition_type;
    let ruleTags = ruleNtApply.product_tags;
    ruleTags = ruleTags ? ruleTags.split(",") : [];

    let specificProductIds = ruleNtApply.product_ids;
    specificProductIds = specificProductIds ? specificProductIds.split(",") : [];

    let ruleCollectionIds = ruleNtApply.product_collections;
    ruleCollectionIds = ruleCollectionIds ? ruleCollectionIds.split(",") : [];

    let productId = productData.product_id ? productData.product_id : productData.id;
    let collections = productData.collections;
    let tags = productData ? productData.tags : '';

    if (conditionType == 0) {
        return true;
    } else if (conditionType == 1) {
        if (specificProductIds.indexOf(productId + "") !== -1) {
            return true;
        }
    } else if (conditionType == 2) {
        var checkArray = collections.filter(collection => ruleCollectionIds.includes(collection + ""))
        if (checkArray.length > 0) {
            return true;
        }
    } else if (conditionType == 3) {
        var checkArray = ruleTags.filter(tag => tags.includes(tag + ""))
        if (checkArray.length > 0) {
            return true;
        }
    }
    return false;
}
{% endif %}

const showPopupCustomerLogin = () => {
    const popupCustomerLogin = document.querySelector('.popup.popup-customer-login');
    popupCustomerLogin.style.display = 'block';
    document.querySelector('.popup-close.popup-customer-login').onclick = () => {
        popupCustomerLogin.style.display = 'none';
    }
}

const validatePurchaseLate = function(cartData, isFirstLoad = true) {
    try {
        if (cartData.items && cartData.items.length > 0) {
            var productMap = [];
            var handleUrls = [];
            var handles = [];
            var keyIdMap = new Map();
            var cartItemProductMap = new Map();
            var cartItemProductMapByKey = [];
            var totalPrice = cartData.items_subtotal_price;
            var currency = cartData.currency;
            var itemsData = [];
            cartData.items.forEach(function(item) {
                itemsData.push({
                    id: item.product_id,
                    final_line_price: item.final_line_price,
                    quantity: item.quantity,
                    title: item.title
                });
                var proId = item.product_id;
                if (handles.indexOf(proId) === -1) {
                    handles.push(proId);
                    handleUrls.push('id:"' + proId + '"');
                    keyIdMap.set(proId, []);
                }
                let productItemKeys = keyIdMap.get(proId);
                productItemKeys.push(item.key)
                keyIdMap.set(proId, productItemKeys);

                var productVariants = cartItemProductMap.get(proId);
                if (!productVariants || productVariants == undefined) {
                    cartItemProductMap.set(proId, [])
                    productVariants = [];
                }

                productVariants.push({
                    key: item.key,
                    quantity: item.quantity,
                    id: item.variant_id,
                    price: item.price
                });
                cartItemProductMap.set(proId, productVariants);
                cartItemProductMapByKey.push({
                    key: item.key,
                    price: item.price
                })
            })
            var urlData = '/search.js?q=' + handleUrls.join(' OR ') + '&view=bss.bcp';
            var encodeUrlData = encodeURI(urlData);


            var options = {
                method: 'GET'
            };
            var getSearchDataReq = fetch(encodeUrlData, options);
            getSearchDataReq
                .then(function(response) {
                    if (!response.ok) {
                        throw new Error("HTTP error, status = " + response.status);
                    }
                    var dataJSON_promise = response.json();
                    return dataJSON_promise;
                })
                .then(function(responProd) {
                    if (responProd.length > 0) {
                        var productMap = [];
                        var productPrices = [];
                        var checkUnique = [];
                        for (var i = 0; i < responProd.length; i++) {
                            var pro = responProd[i];

                            if (checkUnique.indexOf(pro.id) === -1) {
                                checkUnique.push(pro.id);
                                keyIdMap.get(pro.id).forEach(function(key) {
                                    productMap.push({
                                        product_id: pro.id,
                                        tags: pro.tags,
                                        collections: pro.collections,
                                        key: key,
                                        title: pro.title
                                    });
                                })
                            }
                        }
                        checkUnique = [];

                        checkRuleForCustomerAndProduct(productMap, cartData.items);

                        let invalidNtProductNtRule = [];
                        let validNtProductNtRule = [];
                        productMap.map((item) => {
                            let isValidProduct = checkProductPurchaseLate(item);
                            if (!isValidProduct) {
                                invalidNtProductNtRule.push(item);
                                checkUnique.push(item.product_id);
                            }
                        })
                        itemsData.map((item) => {
                            if (!checkUnique.includes(item.id)) {
                                validNtProductNtRule.push(item);
                            }
                        });
                        window.invalidNtProduct = invalidNtProductNtRule;
                        window.validNtProductNtRule = validNtProductNtRule;

                        if (!isFirstLoad) {
                            const hasQIError = document.getElementsByClassName('modalWarningQI').length && document.getElementsByClassName('modalWarningQI')[0].style.display == "block";   
                            let bssBCPNTChoose = Object.keys(invalidRuleNtApply) > 0 ? invalidRuleNtApply : ruleNtApply;
                            localStorage.setItem('bssBCPNtId', bssBCPNTChoose.id);
                            if (hasQIError) {
                                    // do nothing, block store go direct to bcp proxy 
                            } else if (document.querySelector('.bss-modal-amo.active')) {
                                // do nothing, OL warning popup show
                            } else if (bssBCPNTChoose.apply_to == 3 && invalidNtProductNtRule.length) {
                                {% if customer %}
                                    handleInvalidProductShowPopup(invalidNtProductNtRule, validNtProductNtRule);
                                {% else %}
                                    showPopupCustomerLogin();
                                {% endif %}
                            } else if ((bssBCPNTChoose.product_condition_type != 0 && invalidNtProductNtRule.length) || (!ruleNtApply && invalidNtProductNtRule.length)) {
                                handleInvalidProductShowPopup(invalidNtProductNtRule, validNtProductNtRule);
                            } else if (validNtProductNtRule.length ) {
                                handleRemoveProductOnPortalRule(invalidNtProductNtRule, validNtProductNtRule);
                            } else {
                                window.location = '/apps/customer-portal/purchase-late';
                            }
                        }
                    }
                })
                .catch(function(error) {
                    console.log("Noooooo! Something error:");
                    console.log(error);
                });

        } else {
            checkRuleForCustomerAndProduct([], []);
            console.log("Could not get cart data")
        }
    } catch (e) {
        console.log("Could not get shop data");
    }
}

const handleInvalidProductShowPopup = (invalidNT, validNtProductNtRule) => {
    let nameListStr = getProductNameList(invalidNT);
    document.querySelector('.invalid-netterm-product').innerHTML = nameListStr;
    let popupHtml = document.querySelector('.popup.popup-validate-product');
    popupHtml.style.display = 'block';
    document.querySelector('.popup-close.popup-validate-product').onclick = () => {
        popupHtml.style.display = 'none';
    }
    document.querySelector('.bss-proceed-to-purchase-late').onclick = () => {
        handleRemoveProductOnPortalRule(invalidNT, validNtProductNtRule);
    }
}

const checkCartAmount = function (cartAmount, ruleAmount, ruleType) {
    switch (ruleType) {
        case "0":
            if ((cartAmount/100).toFixed(2) < ruleAmount) {
                document.querySelector('.valid-netterm-product-message').innerHTML = "Your cart's total value must be greater than or equal to " + ruleAmount;
                return false;
            }
            break;
        case "1":
            if ((cartAmount/100).toFixed(2) > ruleAmount) {
                document.querySelector('.valid-netterm-product-message').innerHTML = "Your cart's total value must be less than or equal to " + ruleAmount;
                return false;
            }
            break;
    }
    return true;
}
const checkCartQuantity = function (cartQuantity, ruleQuantity, ruleType) {
    switch (ruleType) {
        case "2": {
            if (cartQuantity < ruleQuantity) {
                document.querySelector('.valid-netterm-product-message').innerHTML = "The quantity of items in your cart must be greater than or equal to " + ruleQuantity;
                return false;
            }
            return true;
        }
        case "3": {
            if (cartQuantity > ruleQuantity) {
                document.querySelector('.valid-netterm-product-message').innerHTML = "The quantity of items in your cart must be less than or equal to " + ruleQuantity;
                return false;
            }
            return true;
        }
        default:
            return true;
    }
}
const handleCartCheckout = function (olStatus, olType, olAmount, cartQuantity, cartAmount) {
    let canCheckout = true;
    if (olStatus === "1") {
        switch (olType) {
            case "0":
            case "1": {
                canCheckout = checkCartAmount(cartAmount, olAmount, olType);
                break;
            }
            case "2":
            case "3": {
                canCheckout = checkCartQuantity(cartQuantity, olAmount, olType);
                break;
            }
            default:
                break;
        }
    }
    if (!canCheckout) {
        let popupHtml = document.querySelector('.popup.popup-validate-product');
        popupHtml.style.display = 'none';
        let popupRestrictNTHtml = document.querySelector('.popup.popup-validate-restrict');
        popupRestrictNTHtml.style.display = 'block';
        document.querySelector('.popup-close.popup-validate-restrict').onclick = () => {
        popupRestrictNTHtml.style.display = 'none';
        }
    }
    return canCheckout;
}
const handleRemoveProductOnPortalRule = function(listKey, validNtProductNtRule) {
    {% if nt_apply_to == "2" %}
        let olStatus = ruleNtApply.ol_status
        let olType = ruleNtApply.ol_type
        let olAmount = Number.parseFloat(ruleNtApply.ol_amount)
    {% else %}
        let olStatus = {{nt_rules_ol_status}}
        let olType = {{nt_rules_ol_type}}
        let olAmount = Number.parseFloat({{nt_rules_ol_amount}})
    {% endif %}
    let cartQuantity = 0;
    let cartAmount = 0;
    let itemUpdate = {}
    let checkRestrictNT = false;
    listKey.map((item) => {
        let variantId = item.key.split(':')[0];
        itemUpdate[variantId] = 0
    });
    if (validNtProductNtRule.length) {
        validNtProductNtRule.map((item) => {
            cartQuantity += item.quantity;
            cartAmount += item.final_line_price;
        });
        checkRestrictNT = handleCartCheckout(olStatus, olType, olAmount, cartQuantity, cartAmount);
    } else {
        if(itemUpdate.length){
            fetch('/cart/update.js', {
                method: 'post',
                headers: {
                    'Accept': 'application/json, text/plain, */*',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    updates: itemUpdate
                })
            }).then(res => res.json())
            .then(window.location = '/apps/customer-portal/purchase-late');
        } else {
            window.location = '/apps/customer-portal/purchase-late'
        }
    }
    if (checkRestrictNT) {
        if(itemUpdate.length){
            fetch('/cart/update.js', {
                method: 'post',
                headers: {
                    'Accept': 'application/json, text/plain, */*',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    updates: itemUpdate
                })
            }).then(res => res.json())
                .then(window.location = '/apps/customer-portal/purchase-late');
        } else{
            window.location = '/apps/customer-portal/purchase-late'
        }
       
    } else {
        let nameListStr = getProductNameList(validNtProductNtRule);
        document.querySelector('.valid-netterm-product').innerHTML = nameListStr;
    }
}

const getProductNameList = (invalidNtProduct) => {
    let nameList = invalidNtProduct.map((item) => {
        return item.title;
    });
    return nameList.join(', ');
}

{% if nt_apply_to == "2" %}
    const validateProductBeforePurchaseLate = function() {
        if (checkRuleNtApply()) {
            getCartData(false);
        } else {
            if(ruleNtApply) {
                document.querySelector('.bss-purchase-late-rule-name').innerHTML = ruleNtApply.name;
            }
            if (ruleNtApply.apply_to === 3) {
                showPopupCustomerLogin();
            } else {
                let popupMultiButton = document.querySelector('.popup.popup-multi-button');
                popupMultiButton.style.display = 'block';
                document.querySelector('.popup-close.popup-multi-button').onclick = () => {
                    popupMultiButton.style.display = 'none';
                }
            }
        }
    }
{% elsif nt_apply_to == "1" %}
const validateProductBeforePurchaseLate = function() {
    if (checkCustomerApply()) {
        getCartData(false);
    } else {
        window.allowPurchaseLateByRule = false
        ruleNtApply = Object.keys(ruleNtApply).length ? ruleNtApply : invalidRuleNtApply;
        if (ruleNtApply.apply_to === 3) {
            showPopupCustomerLogin();
        } else {
            let popupMultiButton = document.querySelector('.popup.popup-multi-button');
            popupMultiButton.style.display = 'block';
            document.querySelector('.popup-close.popup-multi-button').onclick = () => {
                popupMultiButton.style.display = 'none';
            }
        }
    }
}
{% else %}
const validateProductBeforePurchaseLate = function () {
    if (window.location.host === 'airfluidizedtherapy.com') {
        if (validatePurchaseOrder()) {
            getCartData(false);
        }
    } else {
        getCartData(false);
    }
}
const validatePurchaseOrder = function () {
    let purchaseOrderElement = document.getElementById('purchase-order')
    if (purchaseOrderElement) {
        if (purchaseOrderElement.value.trim() === '') {
            let message = "This field is required";
            let messageElement = document.createElement('span')
            messageElement.className = 'bss-error-msg';
            messageElement.style.color = '#ab2121';
            messageElement.style.height = '40px';
            document.getElementsByClassName('cart-attribute__field')[0].appendChild(messageElement);
            document.querySelector('.bss-error-msg').innerHTML = message;
            return false;
        }
    }
    return true;
}
{% endif %}

const checkCustomer = (rule, customer) => {
    let applyTo = rule.apply_to;
    let customerIds = rule.customer_ids;
    let customerTags = rule.customer_tags;

    if (applyTo === 0) {
        return true;
    } else if (applyTo === 1) {
        customerIds = customerIds ? customerIds.split(',') : [];
        if (customerIds.includes(customer.id + "")) {
            return true;
        }
    } else if (applyTo === 2) {
        customerTags = customerTags.split(",").map((tag) => tag.toLowerCase().trim());
        let tagsOfCustomer = customer.tags.map((tag) => {
            return tag.toLowerCase().trim();
        });
        let checkArray = customerTags.filter((tag) =>
            tagsOfCustomer.includes(tag),
        );
        if (checkArray.length !== 0) {
            return true;
        }
    } else if (applyTo === 3) {
        if (customer.id) {
            return true;
        }
    }
    return false;
}

const checkProduct = function(rule, item) {
    let conditionType = rule ? rule.product_condition_type : null;
    let ruleTags = rule ? rule.product_tags : [];
    ruleTags = ruleTags ? ruleTags.split(",") : [];

    let specificProductIds = rule.product_ids;
    specificProductIds = specificProductIds ? specificProductIds.split(",") : [];

    let ruleCollectionIds = rule.product_collections;
    ruleCollectionIds = ruleCollectionIds ? ruleCollectionIds.split(",") : [];

    let productId = item.product_id ? item.product_id : item.id;
    let collections = item ? item.collections : [];
    let tags = item ? item.tags : [];

    if (conditionType == 0) {
        return true;
    } else if (conditionType == 1) {
        if (specificProductIds.indexOf(productId + "") !== -1) {
            return true;
        }
    } else if (conditionType == 2) {
        let checkArray = collections.filter(collection => ruleCollectionIds.includes(collection + ""))
        if (checkArray.length > 0) {
            return true;
        }
    } else if (conditionType == 3) {
        let checkArray = ruleTags.filter(tag => tags.includes(tag + ""))
        if (checkArray.length > 0) {
            return true;
        }
    }
    return false;
}

const checkRuleForCustomerAndProduct = function(productMap, cartData) {
    let customer = {
        id: "",
        tags: []
    };
    {% if customer %}
        customer.id = {{ customer.id | json }};
        customer.tags = {{ customer.tags | json }};
    {% endif %}

    {% if nt_apply_to == "2" %}
        let ruleId = localStorage.getItem('bssBCPNtId');
        let ruleApply = {};
        bssListRule.map(rule => {
            if (ruleId == rule.id) {
                ruleApply = rule;
            }
        });
        if (checkCustomer(ruleApply, customer)) {
            for(let j=0; j<productMap.length; j++) {
                let item = productMap[j];
                if (checkProduct(ruleApply, item)) {
                    ruleNtApply = ruleApply;
                } else {
                    invalidRuleNtApply = ruleApply;
                    break;
                }
            }
        } else {
            invalidRuleNtApply = ruleApply;
        }
    {% else %}
        let listRuleFinal = [];
        let listRuleApplyCustomer = [];
        let listRuleError = [];
        let mapRuleById = new Map();
        let commonRule = new Map();
        let checkUnique = [];
        for(let i=0; i<bssListRule.length; i++) {
            let rule = bssListRule[i];
            mapRuleById.set(rule.id, rule);
            if (checkCustomer(rule, customer)) {
                listRuleApplyCustomer.push(rule);
                if (productMap && productMap.length) {
                    for(let j=0; j<productMap.length; j++) {
                        let item = productMap[j];
                        if (checkProduct(rule, item)) {
                            let valueCommonRule = commonRule.get(rule.id)
                            if (valueCommonRule && valueCommonRule.length) {
                                valueCommonRule = [...valueCommonRule, item.product_id];
                            } else {
                                valueCommonRule = [item.product_id];
                            }
                            commonRule.set(rule.id, valueCommonRule);
                        }
                    }
                }
            } else {
                listRuleError.push(rule);
            }
        }

        for (const [key, value] of commonRule.entries()) {
            let ruleApply = mapRuleById.get(key);
            listRuleFinal = [...listRuleFinal, ruleApply]
        }
        listRuleFinal = listRuleFinal.sort((a, b) => a.priority - b.priority);
        if (listRuleFinal.length) {
            ruleNtApply = listRuleFinal[0];
            localStorage.setItem('bssBCPNtId', ruleNtApply.id);
        } else {
            let listRuleCheck = listRuleApplyCustomer.length > 0 ? listRuleApplyCustomer : listRuleError;
            let ruleChoice = listRuleCheck[0];
            for (let i = 1; i < listRuleCheck.length; i++) {
                let currentRule = listRuleCheck[i];
                if (ruleChoice.priority > currentRule.priority) {
                    ruleChoice = currentRule;
                } else if (ruleChoice.priority === currentRule.priority) {
                    if (Date.parse(ruleChoice.createdAt) > Date.parse(currentRule.createdAt)) {
                        ruleChoice = currentRule;
                    }
                }
            }
            invalidRuleNtApply = ruleChoice;
            localStorage.setItem('bssBCPNtId', invalidRuleNtApply.id);
        }
    {% endif %}
}

let buttonAddToCart = document.querySelectorAll('form[action="/cart/add"] button[type="submit"]');
if (buttonAddToCart && buttonAddToCart.length) {
    buttonAddToCart.forEach(item => {
        item.addEventListener('click', function () {
            setTimeout(() => {
                getCartData(true);
            }, 1000);
        })
    })
}

</script>
